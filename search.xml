<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MysQL相关</title>
    <url>/2023/10/05/MySql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2023/10/09/About%20Me/</url>
    <content><![CDATA[<p>姓名：小柯</p>
<p>现居：深圳</p>
<p>邮箱：<a href="mailto:&#x31;&#48;&#49;&#x32;&#49;&#52;&#51;&#55;&#53;&#54;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x31;&#48;&#49;&#x32;&#49;&#52;&#51;&#55;&#53;&#54;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>GitHub: <a href="https://github.com/admier-ye/">https://github.com/admier-ye/</a></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>http状态码介绍</title>
    <url>/2023/10/17/python%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>1.一个http响应报文是由响应行，响应头，空行和响应体4个部分组成</p>
<table>
<thead>
<tr>
<th>http响应报文介绍</th>
</tr>
</thead>
<tbody><tr>
<td>响应行：</td>
</tr>
<tr>
<td>响应头：</td>
</tr>
<tr>
<td>空行：</td>
</tr>
<tr>
<td>响应体：</td>
</tr>
</tbody></table>
<p>2.http状态码介绍</p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">200</td>
<td>请求成功</td>
</tr>
<tr>
<td align="left">307</td>
<td>重定向—改变请求方向</td>
</tr>
<tr>
<td align="left">400</td>
<td>错误的请求，请求地址或者参数有误</td>
</tr>
<tr>
<td align="left">404</td>
<td>请求资源在服务器不存在</td>
</tr>
<tr>
<td align="left">500</td>
<td>服务器内部源代码出现错误</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>技术</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>category/博客搭建</title>
    <url>/2023/10/05/category-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>基于jenkins+k8s+Git+Harbor等技术构建企业级DevOps容器云平台</title>
    <url>/2023/10/19/%E5%9F%BA%E4%BA%8Ejenkins-k8s-Git-Harbor%E7%AD%89%E6%8A%80%E6%9C%AF%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7DevOps%E5%AE%B9%E5%99%A8%E4%BA%91%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="1-搭建环境："><a href="#1-搭建环境：" class="headerlink" title="1.搭建环境："></a>1.搭建环境：</h1><p>​	k8s集群版本是1.20.6</p>
<p>​	jekins版本是2.401</p>
<p>k8s环境：</p>
<p>​	</p>
<table>
<thead>
<tr>
<th align="center">k8s节点</th>
<th align="center">ip&#x2F;主机名</th>
<th align="center">配置</th>
<th align="center">系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center">控制节点master1</td>
<td align="center">192.168.1.170</td>
<td align="center">4c4g 40GB</td>
<td align="center">centos7.9</td>
</tr>
<tr>
<td align="center">工作节点node1</td>
<td align="center">192.168.1.171</td>
<td align="center">4c4g 40GB</td>
<td align="center">centos7.9</td>
</tr>
<tr>
<td align="center">工作节点node2</td>
<td align="center">192.168.1.172</td>
<td align="center">4c4g 40GB</td>
<td align="center">centos7.9</td>
</tr>
<tr>
<td align="center">私有仓库habor</td>
<td align="center">192.168.1.173</td>
<td align="center">4c4g 40GB</td>
<td align="center">centos7.9</td>
</tr>
</tbody></table>
<h1 id="2-安装Jenkins"><a href="#2-安装Jenkins" class="headerlink" title="2.安装Jenkins"></a>2.安装Jenkins</h1><h2 id="2-1安装nfs服务，可以选择任一台机器"><a href="#2-1安装nfs服务，可以选择任一台机器" class="headerlink" title="2.1安装nfs服务，可以选择任一台机器"></a>2.1安装nfs服务，可以选择任一台机器</h2><ul>
<li>重点：最好所有机器都安装nfs客户端，不然后面部署会出错，导致持有卷挂载失败</li>
<li>按照以下命令执行安装即可，[root@master1 jenkins]#  yum install nfs-utils -y</li>
<li>其他节点同样的命令执行安装</li>
<li>启动nfs服务，systemctl start nfs</li>
<li>将nfs设置成开机自启 systemctl enable nfs</li>
</ul>
<h2 id="2-2创建一个nfs共享目录"><a href="#2-2创建一个nfs共享目录" class="headerlink" title="2.2创建一个nfs共享目录"></a>2.2创建一个nfs共享目录</h2><ul>
<li>[root@master1 jenkins]# mkdir &#x2F;data&#x2F;v2</li>
<li>[root@master1 jenkins]# vi &#x2F;etc&#x2F;exports   加入配置文件中</li>
<li>&#x2F;data&#x2F;v2 192.168.1.0&#x2F;24(rw,no_root_squash)  这里面是相关权限</li>
<li>运行exportsfs -arv  ，使配置文件生效</li>
</ul>
<h2 id="2-3在k8s集群中部署jenkins"><a href="#2-3在k8s集群中部署jenkins" class="headerlink" title="2.3在k8s集群中部署jenkins"></a>2.3在k8s集群中部署jenkins</h2><h3 id="2-3-1创建名称空间"><a href="#2-3-1创建名称空间" class="headerlink" title="2.3.1创建名称空间"></a>2.3.1创建名称空间</h3><h3 id="2-3-2创建pv"><a href="#2-3-2创建pv" class="headerlink" title="2.3.2创建pv"></a>2.3.2创建pv</h3><h3 id="2-3-3创建pvc"><a href="#2-3-3创建pvc" class="headerlink" title="2.3.3创建pvc"></a>2.3.3创建pvc</h3><h3 id="2-3-4创建一个sa账号"><a href="#2-3-4创建一个sa账号" class="headerlink" title="2.3.4创建一个sa账号"></a>2.3.4创建一个sa账号</h3><h3 id="2-3-5给sa账号进行rbac授权"><a href="#2-3-5给sa账号进行rbac授权" class="headerlink" title="2.3.5给sa账号进行rbac授权"></a>2.3.5给sa账号进行rbac授权</h3><h3 id="2-3-6通过deployment部署jenkins"><a href="#2-3-6通过deployment部署jenkins" class="headerlink" title="2.3.6通过deployment部署jenkins"></a>2.3.6通过deployment部署jenkins</h3><h3 id="2-3-7注意事项："><a href="#2-3-7注意事项：" class="headerlink" title="2.3.7注意事项："></a>2.3.7注意事项：</h3><p>​		部署未成功，可能是权限不够，需要进行授权： chown -R 1000.1000 &#x2F;data&#x2F;v2</p>
<h3 id="2-3-8jenkins前端加上servcie服务，提供外部网络访问"><a href="#2-3-8jenkins前端加上servcie服务，提供外部网络访问" class="headerlink" title="2.3.8jenkins前端加上servcie服务，提供外部网络访问"></a>2.3.8jenkins前端加上servcie服务，提供外部网络访问</h3><p>* </p>
<h2 id="2-4配置jenkins"><a href="#2-4配置jenkins" class="headerlink" title="2.4配置jenkins"></a>2.4配置jenkins</h2><ul>
<li>在浏览器的访问jenkins界面：<a href="http://192.168.1.170:30002/">http://192.168.1.170:30002</a></li>
</ul>
<h1 id="3-git的安装"><a href="#3-git的安装" class="headerlink" title="3.git的安装"></a>3.git的安装</h1><p>3.1 安装git   yum install git      查看版本git –version</p>
<p>3.2 创建git账号： useradd git    passwd git</p>
<p>3.3 进入git并初始化仓库  su - git     mkdir创建仓库demo.git，cd进入执行git –bare init初始化</p>
<p>3.4 至此，git服务器已经搭建完成 </p>
<p>3.5 git简单使用：在任意机器安装 git   </p>
<p>​     执行此命令git clone  用户@192.168.1.173：&#x2F;home&#x2F;git&#x2F;demo.git   会提示是个空仓库</p>
<p>​	提交代码：实例   touch 123    git add . (提交本路径所有代码)   git commit -m  ‘test’ (提交本地仓库)</p>
<ul>
<li>提交信息： git config –global user.email “<a href="mailto:&#x79;&#x6f;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#x6d;">&#x79;&#x6f;&#117;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#x6d;</a>“</li>
<li>​                     git config –global user.name “your Nmae”</li>
<li>git push origin master  推送到master分支·</li>
</ul>
<p>3.6 免交互拉取：</p>
<ul>
<li>生成密钥对 ssh-keygen, 一路回车</li>
<li>会在.ssh文件夹中生成id_rsa私钥，和id_rsa_pub公钥</li>
<li>然后将公钥拷贝到git服务器中去， ssh-copy-id <a href="mailto:&#103;&#105;&#116;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#49;&#x2e;&#49;&#x37;&#51;">&#103;&#105;&#116;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#49;&#x2e;&#49;&#x37;&#51;</a>    默认保存在git服务器文件下</li>
<li>ssh <a href="mailto:&#103;&#x69;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#x31;&#x2e;&#49;&#55;&#51;">&#103;&#x69;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#x31;&#x2e;&#49;&#55;&#51;</a>   进行测试验证</li>
</ul>
<p>3.7  拉取代码 git clone  <a href="mailto:&#103;&#x69;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#x37;&#51;">&#103;&#x69;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#x37;&#51;</a>:&#x2F;home&#x2F;git&#x2F;demo.git</p>
<p>3.8如果其他开发者也需要认证，同样生成密钥对，只需将要公钥放在 .ssh&#x2F; 下面的authorized_keys中</p>
<h1 id="4-harbor的安装"><a href="#4-harbor的安装" class="headerlink" title="4.harbor的安装"></a>4.harbor的安装</h1><ul>
<li>安装harbor的前提下，需要安装docker  ee   和安装docker  compose</li>
<li>harbor异常被关： docker compose  up -d</li>
<li>查看仓库地址 cat .git&#x2F;config</li>
</ul>
<p>4.1 下载离线安装包：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a>   offline版本</p>
<p>4.2  压缩包进行解压  tar -zxvf harbor-offline-installer-v2.7.3.tgz</p>
<p>4.3  进行配置文件，修改访问地址  vi  harbor.yml</p>
<ul>
<li>hostname &#x3D; 192.168.1.173</li>
<li>harbor_admin_password &#x3D; Harbor123456</li>
</ul>
<p>4.4 准备配置：执行脚本sh prepare      导入镜像并启动：sh install.sh</p>
<p>4.5安装harbor的前提下，需要安装docker  ee   和安装docker  compose</p>
<h1 id="5-根据项目环境构建jenkins-Slave镜像，基于java"><a href="#5-根据项目环境构建jenkins-Slave镜像，基于java" class="headerlink" title="5.根据项目环境构建jenkins-Slave镜像，基于java"></a>5.根据项目环境构建jenkins-Slave镜像，基于java</h1><ul>
<li>镜像构建 docker build -t 192.168.1.173&#x2F;library&#x2F;jenkins-slave-jdk:1.8 . (指定dockerfile路径)<ul>
<li>Successfully built f30c9b9b19c2<br>Successfully tagged 192.168.1.173&#x2F;library&#x2F;jenkins-slave-jdk:1.8</li>
</ul>
</li>
<li>配置信任http  vi &#x2F;etc&#x2F;docker&#x2F;daemon.json 加上   “insecure-registries”: [“192.168.1.173”] </li>
<li>进行登录harbor服务器  docker  login 192.168.1.173   （验证测试）</li>
<li>进行推送  docker push 192.168.1.173&#x2F;library&#x2F;jenkins-slave-jdk:1.8</li>
</ul>
<h1 id="6-jenkins-Piepline搭建与使用"><a href="#6-jenkins-Piepline搭建与使用" class="headerlink" title="6.jenkins Piepline搭建与使用"></a>6.jenkins Piepline搭建与使用</h1><p>6.1 简介：jenkins pipeline是一套插件，支持在jenkins中实现集成和持续交付管道</p>
<p>6.2 </p>
]]></content>
      <categories>
        <category>devops</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to ！ This is your very first post. thanks！</p>
<p>目前文章略有草率，后续会陆续更新，可收藏关注哦！</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
  </entry>
</search>
